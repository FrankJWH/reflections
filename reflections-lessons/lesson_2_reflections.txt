1. What happens when you initialize a repository? Why do you need to do it?

    It sets up your git config files and prompts it to be version-controlled for commits and changes for this repo. A repo is like a special directory for a collection of files that are being version controlled and committed as the accepted version of the project from the working project.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

    The working directory is where all the files are being constructed and revised for changes in the repository but doesn't directly edit it. The staging area is where all the possible changes are put with commits made to inform what was changed and where. It provides a failsafe for your editable files without making any final changes to the project.

3. How can you use the staging area to make sure you have one commit per logical change?

    I can make a single logical change then add and then commit the change directly afterwards.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

    Branches are useful in keeping different versions of your repo that have intentional changes in how it performs from the other branch repos of the same project. While commits are used for version changes to code being added or fixing bugs, branches just offer a copy of your repo that is meant to be used
for other purposes such as experimental or a separate version of it.

5. How do the diagrams help you visualize the branch structure?

    This helps by listing the separate branches or versions of the repo you're working on and to see which commits you can jump to in the current branch.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    Merging two branches together makes the projects combine and the two historys of the branches prior to merging become part of the same branch with the new master node connecting them together as its head.

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

    Git's auto merge analyzes what can be merged together and what code needs special attention by the coders' themselves. Manual would require a lot more work and not to mention attention to detail on focusing on parts of the code that neeeds to be discussed. However, you can apply your own logic which is more effective.
